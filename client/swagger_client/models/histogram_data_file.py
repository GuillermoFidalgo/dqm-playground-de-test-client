# coding: utf-8

"""
    MLPlayground

    API  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HistogramDataFile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'filepath': 'str',
        'filesize': 'float',
        'data_era': 'str',
        'entries_total': 'int',
        'entries_processed': 'int',
        'percentage_processed': 'str',
        'contents': 'list[HistogramDataFileContents]',
        'created': 'datetime',
        'modified': 'datetime',
        'run_histograms': 'int',
        'lumisection_histograms_1d': 'int',
        'lumisection_histograms_2d': 'int'
    }

    attribute_map = {
        'id': 'id',
        'filepath': 'filepath',
        'filesize': 'filesize',
        'data_era': 'data_era',
        'entries_total': 'entries_total',
        'entries_processed': 'entries_processed',
        'percentage_processed': 'percentage_processed',
        'contents': 'contents',
        'created': 'created',
        'modified': 'modified',
        'run_histograms': 'run_histograms',
        'lumisection_histograms_1d': 'lumisection_histograms_1d',
        'lumisection_histograms_2d': 'lumisection_histograms_2d'
    }

    def __init__(self, id=None, filepath=None, filesize=None, data_era=None, entries_total=None, entries_processed=None, percentage_processed=None, contents=None, created=None, modified=None, run_histograms=None, lumisection_histograms_1d=None, lumisection_histograms_2d=None):  # noqa: E501
        """HistogramDataFile - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._filepath = None
        self._filesize = None
        self._data_era = None
        self._entries_total = None
        self._entries_processed = None
        self._percentage_processed = None
        self._contents = None
        self._created = None
        self._modified = None
        self._run_histograms = None
        self._lumisection_histograms_1d = None
        self._lumisection_histograms_2d = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.filepath = filepath
        if filesize is not None:
            self.filesize = filesize
        if data_era is not None:
            self.data_era = data_era
        if entries_total is not None:
            self.entries_total = entries_total
        if entries_processed is not None:
            self.entries_processed = entries_processed
        if percentage_processed is not None:
            self.percentage_processed = percentage_processed
        self.contents = contents
        if created is not None:
            self.created = created
        if modified is not None:
            self.modified = modified
        self.run_histograms = run_histograms
        self.lumisection_histograms_1d = lumisection_histograms_1d
        self.lumisection_histograms_2d = lumisection_histograms_2d

    @property
    def id(self):
        """Gets the id of this HistogramDataFile.  # noqa: E501


        :return: The id of this HistogramDataFile.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HistogramDataFile.


        :param id: The id of this HistogramDataFile.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def filepath(self):
        """Gets the filepath of this HistogramDataFile.  # noqa: E501

        Path where the file is stored  # noqa: E501

        :return: The filepath of this HistogramDataFile.  # noqa: E501
        :rtype: str
        """
        return self._filepath

    @filepath.setter
    def filepath(self, filepath):
        """Sets the filepath of this HistogramDataFile.

        Path where the file is stored  # noqa: E501

        :param filepath: The filepath of this HistogramDataFile.  # noqa: E501
        :type: str
        """
        if filepath is None:
            raise ValueError("Invalid value for `filepath`, must not be `None`")  # noqa: E501

        self._filepath = filepath

    @property
    def filesize(self):
        """Gets the filesize of this HistogramDataFile.  # noqa: E501

        The data file's size (Mbytes)  # noqa: E501

        :return: The filesize of this HistogramDataFile.  # noqa: E501
        :rtype: float
        """
        return self._filesize

    @filesize.setter
    def filesize(self, filesize):
        """Sets the filesize of this HistogramDataFile.

        The data file's size (Mbytes)  # noqa: E501

        :param filesize: The filesize of this HistogramDataFile.  # noqa: E501
        :type: float
        """

        self._filesize = filesize

    @property
    def data_era(self):
        """Gets the data_era of this HistogramDataFile.  # noqa: E501

        The era that the data refers to (e.g. 2018A)  # noqa: E501

        :return: The data_era of this HistogramDataFile.  # noqa: E501
        :rtype: str
        """
        return self._data_era

    @data_era.setter
    def data_era(self, data_era):
        """Sets the data_era of this HistogramDataFile.

        The era that the data refers to (e.g. 2018A)  # noqa: E501

        :param data_era: The data_era of this HistogramDataFile.  # noqa: E501
        :type: str
        """

        self._data_era = data_era

    @property
    def entries_total(self):
        """Gets the entries_total of this HistogramDataFile.  # noqa: E501

        Total number of entries contained in this histogram file  # noqa: E501

        :return: The entries_total of this HistogramDataFile.  # noqa: E501
        :rtype: int
        """
        return self._entries_total

    @entries_total.setter
    def entries_total(self, entries_total):
        """Sets the entries_total of this HistogramDataFile.

        Total number of entries contained in this histogram file  # noqa: E501

        :param entries_total: The entries_total of this HistogramDataFile.  # noqa: E501
        :type: int
        """

        self._entries_total = entries_total

    @property
    def entries_processed(self):
        """Gets the entries_processed of this HistogramDataFile.  # noqa: E501

        Number of histogram entries that have been extracted from the file  # noqa: E501

        :return: The entries_processed of this HistogramDataFile.  # noqa: E501
        :rtype: int
        """
        return self._entries_processed

    @entries_processed.setter
    def entries_processed(self, entries_processed):
        """Sets the entries_processed of this HistogramDataFile.

        Number of histogram entries that have been extracted from the file  # noqa: E501

        :param entries_processed: The entries_processed of this HistogramDataFile.  # noqa: E501
        :type: int
        """

        self._entries_processed = entries_processed

    @property
    def percentage_processed(self):
        """Gets the percentage_processed of this HistogramDataFile.  # noqa: E501


        :return: The percentage_processed of this HistogramDataFile.  # noqa: E501
        :rtype: str
        """
        return self._percentage_processed

    @percentage_processed.setter
    def percentage_processed(self, percentage_processed):
        """Sets the percentage_processed of this HistogramDataFile.


        :param percentage_processed: The percentage_processed of this HistogramDataFile.  # noqa: E501
        :type: str
        """

        self._percentage_processed = percentage_processed

    @property
    def contents(self):
        """Gets the contents of this HistogramDataFile.  # noqa: E501

        The file's contents in regards to histogram type and dimensionality  # noqa: E501

        :return: The contents of this HistogramDataFile.  # noqa: E501
        :rtype: list[HistogramDataFileContents]
        """
        return self._contents

    @contents.setter
    def contents(self, contents):
        """Sets the contents of this HistogramDataFile.

        The file's contents in regards to histogram type and dimensionality  # noqa: E501

        :param contents: The contents of this HistogramDataFile.  # noqa: E501
        :type: list[HistogramDataFileContents]
        """
        if contents is None:
            raise ValueError("Invalid value for `contents`, must not be `None`")  # noqa: E501

        self._contents = contents

    @property
    def created(self):
        """Gets the created of this HistogramDataFile.  # noqa: E501


        :return: The created of this HistogramDataFile.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this HistogramDataFile.


        :param created: The created of this HistogramDataFile.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this HistogramDataFile.  # noqa: E501


        :return: The modified of this HistogramDataFile.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this HistogramDataFile.


        :param modified: The modified of this HistogramDataFile.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def run_histograms(self):
        """Gets the run_histograms of this HistogramDataFile.  # noqa: E501

        Total Run Histograms retrieved form this file  # noqa: E501

        :return: The run_histograms of this HistogramDataFile.  # noqa: E501
        :rtype: int
        """
        return self._run_histograms

    @run_histograms.setter
    def run_histograms(self, run_histograms):
        """Sets the run_histograms of this HistogramDataFile.

        Total Run Histograms retrieved form this file  # noqa: E501

        :param run_histograms: The run_histograms of this HistogramDataFile.  # noqa: E501
        :type: int
        """
        if run_histograms is None:
            raise ValueError("Invalid value for `run_histograms`, must not be `None`")  # noqa: E501

        self._run_histograms = run_histograms

    @property
    def lumisection_histograms_1d(self):
        """Gets the lumisection_histograms_1d of this HistogramDataFile.  # noqa: E501

        Total Lumisection 1D Histograms retrieved form this file  # noqa: E501

        :return: The lumisection_histograms_1d of this HistogramDataFile.  # noqa: E501
        :rtype: int
        """
        return self._lumisection_histograms_1d

    @lumisection_histograms_1d.setter
    def lumisection_histograms_1d(self, lumisection_histograms_1d):
        """Sets the lumisection_histograms_1d of this HistogramDataFile.

        Total Lumisection 1D Histograms retrieved form this file  # noqa: E501

        :param lumisection_histograms_1d: The lumisection_histograms_1d of this HistogramDataFile.  # noqa: E501
        :type: int
        """
        if lumisection_histograms_1d is None:
            raise ValueError("Invalid value for `lumisection_histograms_1d`, must not be `None`")  # noqa: E501

        self._lumisection_histograms_1d = lumisection_histograms_1d

    @property
    def lumisection_histograms_2d(self):
        """Gets the lumisection_histograms_2d of this HistogramDataFile.  # noqa: E501

        Total Lumisection 2D Histograms retrieved form this file  # noqa: E501

        :return: The lumisection_histograms_2d of this HistogramDataFile.  # noqa: E501
        :rtype: int
        """
        return self._lumisection_histograms_2d

    @lumisection_histograms_2d.setter
    def lumisection_histograms_2d(self, lumisection_histograms_2d):
        """Sets the lumisection_histograms_2d of this HistogramDataFile.

        Total Lumisection 2D Histograms retrieved form this file  # noqa: E501

        :param lumisection_histograms_2d: The lumisection_histograms_2d of this HistogramDataFile.  # noqa: E501
        :type: int
        """
        if lumisection_histograms_2d is None:
            raise ValueError("Invalid value for `lumisection_histograms_2d`, must not be `None`")  # noqa: E501

        self._lumisection_histograms_2d = lumisection_histograms_2d

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HistogramDataFile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HistogramDataFile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
