# coding: utf-8

"""
    MLPlayground

    API  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HistogramDataFileContents(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'granularity': 'str',
        'data_dimensionality': 'int'
    }

    attribute_map = {
        'granularity': 'granularity',
        'data_dimensionality': 'data_dimensionality'
    }

    def __init__(self, granularity=None, data_dimensionality=None):  # noqa: E501
        """HistogramDataFileContents - a model defined in Swagger"""  # noqa: E501
        self._granularity = None
        self._data_dimensionality = None
        self.discriminator = None
        if granularity is not None:
            self.granularity = granularity
        if data_dimensionality is not None:
            self.data_dimensionality = data_dimensionality

    @property
    def granularity(self):
        """Gets the granularity of this HistogramDataFileContents.  # noqa: E501

        The granularity of the data contained in the data file (either whole run or lumisections).  # noqa: E501

        :return: The granularity of this HistogramDataFileContents.  # noqa: E501
        :rtype: str
        """
        return self._granularity

    @granularity.setter
    def granularity(self, granularity):
        """Sets the granularity of this HistogramDataFileContents.

        The granularity of the data contained in the data file (either whole run or lumisections).  # noqa: E501

        :param granularity: The granularity of this HistogramDataFileContents.  # noqa: E501
        :type: str
        """
        allowed_values = ["unk", "run", "lum"]  # noqa: E501
        if granularity not in allowed_values:
            raise ValueError(
                "Invalid value for `granularity` ({0}), must be one of {1}"  # noqa: E501
                .format(granularity, allowed_values)
            )

        self._granularity = granularity

    @property
    def data_dimensionality(self):
        """Gets the data_dimensionality of this HistogramDataFileContents.  # noqa: E501


        :return: The data_dimensionality of this HistogramDataFileContents.  # noqa: E501
        :rtype: int
        """
        return self._data_dimensionality

    @data_dimensionality.setter
    def data_dimensionality(self, data_dimensionality):
        """Sets the data_dimensionality of this HistogramDataFileContents.


        :param data_dimensionality: The data_dimensionality of this HistogramDataFileContents.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if data_dimensionality not in allowed_values:
            raise ValueError(
                "Invalid value for `data_dimensionality` ({0}), must be one of {1}"  # noqa: E501
                .format(data_dimensionality, allowed_values)
            )

        self._data_dimensionality = data_dimensionality

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HistogramDataFileContents, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HistogramDataFileContents):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
